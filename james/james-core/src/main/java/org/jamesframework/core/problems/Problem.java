/*
 * Copyright 2014 Ghent University, Bayer CropScience.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jamesframework.core.problems;

import org.jamesframework.core.problems.objectives.Evaluation;
import org.jamesframework.core.search.neigh.Move;

/**
 * Interface of a problem with a generic solution type. Contains methods to evaluate or validate a solution
 * or move and to create a random solution. Also indicates whether evaluations are to be maximized or minimized.
 * 
 * @author <a href="mailto:herman.debeukelaer@ugent.be">Herman De Beukelaer</a>
 * @param <SolutionType> the solution type that corresponds to this problem, required to extend {@link Solution}
 */
public interface Problem<SolutionType extends Solution> {
    
    /**
     * Evaluates a given solution. Returns an object of type {@link Evaluation}. The corresponding
     * double value can be obtained by calling {@link Evaluation#getValue()} on the evaluation object.
     * 
     * @param solution the solution to evaluate
     * @return evaluation of the given solution
     */
    public Evaluation evaluate(SolutionType solution);
    
    /**
     * <p>
     * Evaluates a move that will be applied to the current solution of a local search (delta evaluation).
     * The result corresponds to the evaluation of the modified solution that would be obtained by applying
     * the given move to the current solution. A default implementation is provided that (1) applies the move,
     * (2) computes a full evaluation by calling {@link #evaluate(Solution)} and (3) undoes the applied move.
     * </p>
     * <p>
     * It is often possible to provide a custom, much more efficient delta evaluation that computes
     * the modified evaluation based on the current evaluation and the changes that will be made
     * when applying the move to the current solution. This can be done by overriding this method.
     * It is usually required to cast the received move to a specific type so that this problem
     * requires application of neighbourhoods that generate moves of this type (or a subtype).
     * If an incompatible move type is received, an {@link IncompatibleDeltaEvaluationException}
     * may be thrown.
     * </p>
     * <p>
     * Given that both this method and the full evaluation ({@link #evaluate(Solution)}) return
     * evaluations of the same type, it is guaranteed that <code>curEvaluation</code> will also be of
     * this specific type and it is safe to perform a cast, if required.
     * </p>
     * 
     * @param move move to evaluate
     * @param curSolution current solution
     * @param curEvaluation evaluation of current solution
     * @return evaluation of modified solution obtained when applying the move to the current solution
     * @throws IncompatibleDeltaEvaluationException if the provided delta evaluation is not compatible
     *                                              with the type of moves generated by the applied
     *                                              neighbourhood(s) in a neighbourhood search
     */
    default public Evaluation evaluate(Move<? super SolutionType> move,
                                       SolutionType curSolution,
                                       Evaluation curEvaluation){
        // apply move
        move.apply(curSolution);
        // full evaluation
        Evaluation e = evaluate(curSolution);
        // undo move
        move.undo(curSolution);
        // return evaluation
        return e;
    }
    
    /**
     * Indicates whether the given solution should be rejected during search,
     * regardless of its evaluation. This method may for example be used to
     * discard solutions that do not satisfy imposed constraints.
     * 
     * @param solution solution to verify
     * @return true if the given solution should be rejected
     */
    public boolean rejectSolution(SolutionType solution);
    
    /**
     * Indicates whether scores are being minimized or maximized.
     * 
     * @return true if scores are being minimized
     */
    public boolean isMinimizing();
    
    /**
     * Creates a random solution. Such random solutions can for example be used as initial solution
     * for neighbourhood searches.
     * 
     * @return a random solution
     */
    public SolutionType createRandomSolution();
    
}
