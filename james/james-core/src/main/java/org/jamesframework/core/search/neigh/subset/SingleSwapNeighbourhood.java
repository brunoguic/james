//  Copyright 2014 Herman De Beukelaer
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package org.jamesframework.core.search.neigh.subset;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import org.jamesframework.core.problems.solutions.SubsetSolution;
import org.jamesframework.core.search.neigh.Move;
import org.jamesframework.core.search.neigh.Neighbourhood;
import org.jamesframework.core.util.SetUtilities;

/**
 * A subset neighbourhood that generates swap moves only (see {@link SwapMove}). When applying moves generated by this neighbourhood
 * to a given subset solution, the set of selected IDs will always remain of the same size. Therefore, this neighbourhood is only
 * suited for fixed size subset selection problems.
 * 
 * @author Herman De Beukelaer <herman.debeukelaer@ugent.be>
 */
public class SingleSwapNeighbourhood implements Neighbourhood<SubsetSolution> {

    /**
     * Generates a random swap move for the given subset solution that removes a single ID from the set of currently selected IDs,
     * and replaces it with a random ID taken from the set of currently unselected IDs. In case when all or no IDs are currently
     * selected, <code>null</code> is returned, as then it is not possible to perform a swap because either the set of unselected
     * or selected IDs, respectively, is empty.
     * 
     * @param solution solution for which a random swap move is generated
     * @return random swap move, <code>null</code> if no or all IDs are currently selected
     */
    @Override
    public Move<SubsetSolution> getRandomMove(SubsetSolution solution) {
        // check if swap is possible
        if(solution.getNumSelectedIDs() == 0 || solution.getNumUnselectedIDs() == 0){
            // impossible to perform a swap
            return null;
        }
        // use thread local random generator for better performance in concurrent use
        Random rg = ThreadLocalRandom.current();
        // select random ID to remove from selection
        int del = SetUtilities.getRandomElement(solution.getSelectedIDs(), rg);
        // select random ID to add to selection
        int add = SetUtilities.getRandomElement(solution.getUnselectedIDs(), rg);
        // create and return swap move
        return new SwapMove(add, del);
    }

    /**
     * Generates a list of all possible swap moves that transform the given subset solution by removing a single ID from
     * the current selection and replacing it with a new ID which is currently not selected. May return an empty list if
     * no swap moves can be applied, i.e. if currently all or no IDs are selected.
     * 
     * @param solution solution for which all possible swap moves are generated
     * @return list of all swap moves, may be empty
     */
    @Override
    public List<Move<SubsetSolution>> getAllMoves(SubsetSolution solution) {
        // first check if swaps are possible, for efficiency (avoids unnecessary loops)
        if(solution.getNumSelectedIDs() == 0 || solution.getNumUnselectedIDs() == 0){
            // no swap moves can be applied
            return Collections.emptyList();
        }
        // create empty list
        List<Move<SubsetSolution>> moves = new ArrayList<>();
        // go through all possible IDs to delete
        for(int del : solution.getSelectedIDs()){
            // go through all possible IDs to add
            for(int add : solution.getUnselectedIDs()){
                // add corresponding swap move to list
                moves.add(new SwapMove(add, del));
            }
        }
        // return list of moves
        return moves;
    }

}
